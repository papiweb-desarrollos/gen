import React from 'react';
import { DownloadIcon } from './icons/DownloadIcon.tsx';
import { SparklesIcon } from './icons/SparklesIcon.tsx';

interface ImageDisplayProps {
  isLoading: boolean;
  error: string | null;
  generatedImage: string | null;
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({ isLoading, error, generatedImage }) => {
  const Placeholder = () => (
    <div className="flex flex-col items-center justify-center h-full text-center text-gray-500">
      <SparklesIcon className="w-24 h-24 text-gray-700 mb-4" />
      <h3 className="text-xl font-semibold text-gray-400">Your masterpiece awaits</h3>
      <p className="mt-2 max-w-sm">Fill out the details on the left and click "Generate Image" to bring your vision to life.</p>
    </div>
  );

  const Loader = () => (
    <div className="flex flex-col items-center justify-center h-full">
      <svg className="animate-spin h-16 w-16 text-purple-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p className="mt-4 text-lg font-semibold text-gray-300">Generating your image...</p>
      <p className="text-gray-500">This might take a moment.</p>
    </div>
  );

  const ErrorDisplay = () => (
    <div className="flex flex-col items-center justify-center h-full text-center text-red-400 bg-red-900/20 p-8 rounded-lg border border-red-500/50">
      <h3 className="text-xl font-bold mb-2">Oops! Something went wrong.</h3>
      <p className="max-w-md">{error}</p>
    </div>
  );

  const handleDownload = () => {
    if (!generatedImage) return;
    const link = document.createElement('a');
    link.href = generatedImage;
    link.download = `gemini-generated-image-${Date.now()}.jpeg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  return (
    <div className="bg-gray-900/50 rounded-lg shadow-inner border border-gray-700/50 w-full h-[400px] md:h-[600px] lg:h-full flex items-center justify-center p-4 relative overflow-hidden">
      {isLoading && <Loader />}
      {error && !isLoading && <ErrorDisplay />}
      {generatedImage && !isLoading && !error && (
        <>
          <img 
            src={generatedImage} 
            alt="Generated by Gemini" 
            className="object-contain w-full h-full rounded-md transition-opacity duration-500 opacity-0 animate-fade-in"
            style={{ animationFillMode: 'forwards' }}
          />
          <button
            onClick={handleDownload}
            className="absolute top-4 right-4 bg-black/50 text-white p-2 rounded-full hover:bg-black/80 transition-all duration-200"
            title="Download Image"
          >
            <DownloadIcon className="w-6 h-6" />
          </button>
        </>
      )}
      {!isLoading && !error && !generatedImage && <Placeholder />}
      <style>{`
        @keyframes fade-in {
          from { opacity: 0; transform: scale(0.95); }
          to { opacity: 1; transform: scale(1); }
        }
        .animate-fade-in {
          animation: fade-in 0.5s ease-out;
        }
      `}</style>
    </div>
  );
};

export default ImageDisplay;